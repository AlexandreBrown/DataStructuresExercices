        -:    0:Source:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/DataStructuresExercices/Exercices/src/main/MyClass.cpp
        -:    0:Graph:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/DataStructuresExercices/Exercices/cmake-build-debug-coverage/CMakeFiles/Exercices_test.dir/src/main/MyClass.cpp.gcno
        -:    0:Data:/home/brownthedev/Documents/uLaval/Hiver2021/IFT-2008 Algorithmes et structures de données/DataStructuresExercices/Exercices/cmake-build-debug-coverage/CMakeFiles/Exercices_test.dir/src/main/MyClass.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <unordered_map>
        -:    2:#include <algorithm>
        -:    3:#include "MyClass.h"
        -:    4:#include <stack>
        -:    5:#include <string>
        -:    6:#include <sstream>
        -:    7:
        3:    8:bool MyClass::ContainsCycle(const std::forward_list<int> &list) const {
        -:    9:
        6:   10:  auto items = std::unordered_map<int, bool>();
        3:   10-block  0
        3:   10-block  1
    $$$$$:   10-block  2
        -:   11:
        3:   12:  return std::any_of(list.begin(), list.end(), [&](int item) {
        6:   13:	if (items.find(item) != items.end()) {
        6:   13-block  0
        6:   13-block  1
    $$$$$:   13-block  2
        1:   14:	  return true;
        1:   14-block  0
        -:   15:	}
        5:   16:	items.insert({item, true});
        5:   16-block  0
    $$$$$:   16-block  1
        -:   17:
        5:   18:	return false;
        5:   18-block  0
        6:   19:  });
        3:   19-block  0
        3:   19-block  1
        -:   20:}
        -:   21:
        1:   22:std::string MyClass::ReverseWords(const std::string &input) const {
        -:   23:
        2:   24:  auto words = std::stack<std::string>();
        1:   24-block  0
    $$$$$:   24-block  1
        -:   25:
        2:   26:  std::istringstream inputSplitBySpace{input};
        1:   26-block  0
    $$$$$:   26-block  1
        2:   27:  std::string word;
        1:   27-block  0
        1:   27-block  1
    $$$$$:   27-block  2
        -:   28:
        4:   29:  while(inputSplitBySpace >> word) {
        4:   29-block  0
        4:   29-block  1
        4:   29-block  2
        3:   29-block  3
        3:   30:	words.push(word);
        3:   30-block  0
        -:   31:  }
        -:   32:
        1:   33:  std::string reversedInput;
        1:   33-block  0
        -:   34:
        4:   35:  while (!words.empty()) {
        4:   35-block  0
        3:   35-block  1
        3:   36:	reversedInput += words.top();
        3:   36-block  0
        3:   37:	words.pop();
        3:   37-block  0
        3:   38:	if (!words.empty()) {
        2:   39:	  reversedInput += " ";
        2:   39-block  0
        -:   40:	}
        -:   41:  }
        -:   42:
        2:   43:  return reversedInput;
        1:   43-block  0
        1:   43-block  1
        -:   44:}
        2:   45:bool MyClass::IsPalindrome(const std::string &input) const {
        2:   46:  return input == ReverseCharacters(input);
        2:   46-block  0
        -:   47:}
        -:   48:
        2:   49:std::string MyClass::ReverseCharacters(const std::string &input) const {
        -:   50:
        4:   51:  auto characters = std::stack<std::string>();
        2:   51-block  0
        2:   51-block  1
    $$$$$:   51-block  2
        -:   52:
       13:   53:  for(const auto& character : input) {
        2:   53-block  0
       13:   53-block  1
       11:   53-block  2
       11:   54:	characters.push(std::string{character});
       11:   54-block  0
       11:   54-block  1
    $$$$$:   54-block  2
    $$$$$:   54-block  3
    $$$$$:   54-block  4
    $$$$$:   54-block  5
    $$$$$:   54-block  6
        -:   55:  }
        -:   56:
        2:   57:  std::string reversedInput;
        2:   57-block  0
        -:   58:
       13:   59:  while (!characters.empty()) {
       13:   59-block  0
       11:   60:	reversedInput += characters.top();
       11:   60-block  0
       11:   61:	characters.pop();
       11:   61-block  0
        -:   62:  }
        -:   63:
        4:   64:  return reversedInput;
        2:   64-block  0
        2:   64-block  1
        -:   65:}
